package com.cvg.msvc.oauth.service;

import java.util.List;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import com.cvg.msvc.oauth.client.UserFeignClient;
import com.cvg.msvc.oauth.models.entity.UserModel;

@Service
public class UserService implements UserDetailsService {
	private static final Logger LOG = LoggerFactory.getLogger( UserService.class );
	
	@Autowired
	private UserFeignClient client;

	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		UserModel user = this.client.findByUsername(username);
		
		if (user == null) {
			LOG.error( "Error al buscar al usuario " + username );
			throw new UsernameNotFoundException("Error al buscar al usuario " + username);
		}
		
		List<GrantedAuthority> permisos = user.getRol()
				.stream()
				.map( role -> new SimpleGrantedAuthority(role.getName()) )
				.peek( authority -> LOG.info("Role: " + authority.getAuthority()) )
				.collect(Collectors.toList());
		LOG.error( "Usuario autenticado " + user );
		return new User(user.getEmail(), user.getPassword(), user.getEnabled(), true, true, true, permisos);
	}

}
